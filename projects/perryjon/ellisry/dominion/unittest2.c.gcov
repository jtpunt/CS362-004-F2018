        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// isGameOver
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "unittestHelper.h"
        -:    5:#include "rngs.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <stdbool.h>
        -:   11:#define MAX_COINS 10
        -:   12:#define GOLD_COINS 3
        -:   13:#define SILVER_COINS 2
        -:   14:#define COPPER_COINS 1
        -:   15:#define TESTS 3
function main called 1 returned 100% blocks executed 100%
        1:   16:int main(int argc, char** argv)	{
        -:   17:	struct gameState A, B, C;
        -:   18:	int i;
        1:   19:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   20:	printf ("Testing isGameOver Function\n");
call    0 returned 100%
        1:   21:	initializeGame(2, k, 4, &A);
call    0 returned 100%
        1:   22:	initializeGame(2, k, 4, &B);
call    0 returned 100%
        1:   23:	initializeGame(2, k, 4, &C);
call    0 returned 100%
        1:   24:	B.supplyCount[province] = 0;
        1:   25:	C.supplyCount[province] = 1;
       26:   26:	for (i = 0; i < 25; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       25:   27:	    if (i != 3){ // skip province in the for loop as we set it to 1 earlier
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
       24:   28:	    	C.supplyCount[i] = 0;
        -:   29:	    }
        -:   30:  	}
        -:   31:  	// test 1 is to test to see if the game is over - which is true in this test - meaning the game is not over
        -:   32:  	// test 2 is to test to see if the game is over when the stack of Province cards is empty - which is true in this test - meaning the game is over
        -:   33:  	// test 3 is to test to see if all 3 supply piles are at three - which is true in this test - meaning the game is over
        1:   34:	bool results[TESTS] = {assertTrue("isGameOver - A", isGameOver(&A), 0), assertTrue("isGameOver - B", isGameOver(&B), 1), assertTrue("isGameOver - C", isGameOver(&C), 1)};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   35:
        1:   36:	printFinalResult(results, TESTS);
call    0 returned 100%
        -:   37:	  
        1:   38:	return 0; 
        -:   39:}
