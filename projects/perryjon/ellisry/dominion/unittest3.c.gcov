        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// buyCard
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "unittestHelper.h"
        -:    5:#include "rngs.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <stdbool.h>
        -:   11:#define MAX_COINS 10
        -:   12:#define GOLD_COINS 3
        -:   13:#define SILVER_COINS 2
        -:   14:#define COPPER_COINS 1
        -:   15:#define TESTS 4
function main called 1 returned 100% blocks executed 100%
        1:   16:int main(int argc, char** argv)	{
        -:   17:	struct gameState state;
        1:   18:	printf("Testing buyCard Function");
call    0 returned 100%
        1:   19:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   20:	initializeGame(2, k, 4, &state);
call    0 returned 100%
        1:   21:	state.supplyCount[estate] = 2;
        1:   22:	state.numBuys = 1; 
        1:   23:	state.coins = 2;
        -:   24:	// if numBuys is < 1, you don't have any buys left - return -1
        -:   25:	// else if there is no supply left of that card, then you can't buy it - return -1
        -:   26:	// else if the # of coins that you have is < cost to buy the item, then you can't buy it - return -1
        -:   27:	// OTHERWISE, you can buy the card
        -:   28:	// phase=1
        -:   29:	// # of coins that the player has is decreased
        -:   30:	// # of buys that the player can do decreases by 1
        -:   31:	// return 0 - no errors
        -:   32:	// 1st test is to see if we can successfully buy an estate card for 2 coins - which should be true as we have started with 2 coins
        -:   33:	// 2nd test is to see if we can successfully not buy a card when there's no supply left
        -:   34:	// 3rd test is to see if we can successfully not buy a card when the player has no buys left
        -:   35:	// 4th test is to see if the gameState variable 'phase' is equal to 1
        1:   36:	bool results[TESTS] = {assertTrue("buyCard", buyCard(1, &state), 0), assertTrue("buyCard", buyCard(1, &state), -1), assertTrue("buyCard", buyCard(1, &state), -1), assertTrue("phase",state.phase, 1)};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -:   37:
        1:   38:	printFinalResult(results, TESTS);
call    0 returned 100%
        -:   39:	
        1:   40:	return 0; 
        -:   41:}
