        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// updateCoins
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "unittestHelper.h"
        -:    5:#include "rngs.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <stdbool.h>
        -:   11:#define MAX_COINS 10
        -:   12:#define GOLD_COINS 3
        -:   13:#define SILVER_COINS 2
        -:   14:#define COPPER_COINS 1
        -:   15:#define TESTS 3
function main called 1 returned 100% blocks executed 100%
        1:   16:int main(int argc, char** argv)	{
        -:   17:	struct gameState copperState, silverState, goldState;
        -:   18:	int i;
        -:   19:	
        1:   20:	printf ("Testing updateCoins Function\n");
call    0 returned 100%
        1:   21:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   22:    initializeGame(2, k, 4, &copperState);
call    0 returned 100%
        1:   23:    initializeGame(2, k, 4, &silverState);
call    0 returned 100%
        1:   24:    initializeGame(2, k, 4, &goldState); // somehow has 5 more coins than silverState
call    0 returned 100%
       11:   25:    for(i = 0; i < MAX_COINS; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   26:    	copperState.hand[0][i] = copper; // fill each hand with treasure cards
       10:   27:    	silverState.hand[0][i] = silver;
       10:   28:    	goldState.hand[0][i] = gold;
        -:   29:    }
        1:   30:	copperState.handCount[0] = MAX_COINS; // update handCount to reflect the correct # of treasure cards on hand
        1:   31:	silverState.handCount[0] = MAX_COINS;
        1:   32:	goldState.handCount[0] = MAX_COINS;
        1:   33:    updateCoins(0, &copperState, 0);
call    0 returned 100%
        1:   34:    updateCoins(0, &silverState, 0);
call    0 returned 100%
        1:   35:    updateCoins(0, &goldState, 0);
call    0 returned 100%
        -:   36:    // test 1 compares the # of coins that should be calculated by updateCoins for copper cards to secondary manual calculation of how many coins this should be
        -:   37:    // test 2 - 3 do the same as above, but for silver and gold cards
        1:   38:    bool results[TESTS] = {assertTrue("COPPER_COINS", copperState.coins, MAX_COINS * COPPER_COINS), assertTrue("SILVER_COINS", silverState.coins, MAX_COINS * SILVER_COINS), assertTrue("GOLD_COINS", goldState.coins, MAX_COINS * GOLD_COINS)};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1:   39:    printFinalResult(results, TESTS);
call    0 returned 100%
        -:   40:
        1:   41:	return 0;
        -:   42:}
